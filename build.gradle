plugins {
  id 'groovy'
  id("com.github.spacialcircumstances.gradle-cucumber-reporting") version "0.1.25"
  id 'jacoco'
  id("org.sonarqube") version "4.4.0.3356"
  id 'maven-publish'
  id("de.zebrajaeger.sendMail") version "0.2.2"
}

group 'com.example'
version '1.0'

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'io.cucumber:cucumber-java:6.0.0'
  testImplementation 'io.cucumber:cucumber-junit:6.0.0'
  testImplementation 'junit:junit:4.12'
  implementation "org.aspectj:aspectjrt:1.9.21.1"
  implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
  implementation 'com.sun.mail:jakarta.mail:2.0.1'
}

cucumberReports {
  outputDir = file('build/reports/cucumber')
  buildId = '0'
  reports = files('reports/example-report.json')
}


test.finalizedBy(jacocoTestReport)
//test.finalizedBy(sonar)
tasks.named('sonar').configure {
  dependsOn 'test' // Exécuter les tests avant l'analyse sonar
}

repositories {
  maven {
    url "https://mymavenrepo.com/repo/Z5cXHxCOH2SYLwLv7btf/"
    credentials {
      username = 'myMavenRepo'
      password = '123456789'
    }
  }
}

publishing {
  repositories {
    maven {
      url "https://mymavenrepo.com/repo/Z5cXHxCOH2SYLwLv7btf/"
      credentials {
        username = 'myMavenRepo'
        password = '123456789'
      }
    }
  }

  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

import groovy.json.JsonOutput

// Fonction pour envoyer un message sur Slack
def sendSlackNotification(String message) {
  def slackWebhookUrl = "https://hooks.slack.com/services/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"
  def payload = JsonOutput.toJson([text: message])

  // Envoyer la requête HTTP POST au Webhook
  def connection = new URL(slackWebhookUrl).openConnection()
  connection.setRequestMethod("POST")
  connection.setDoOutput(true)
  connection.setRequestProperty("Content-Type", "application/json")
  connection.getOutputStream().write(payload.getBytes("UTF-8"))

  // Vérifier si la requête a échoué
  if (connection.getResponseCode() != 200) {
    throw new GradleException("Échec de l'envoi de la notification Slack : ${connection.getResponseMessage()}")
  }
}

// Tâche pour notifier Slack après le déploiement
task notifySlack {
  doLast {
    sendSlackNotification("Déploiement réussi pour le projet !")
  }
}




import jakarta.mail.*
import jakarta.mail.internet.*

plugins {
  id 'groovy'
  id 'maven-publish'
  // Include any other plugins you are using
}

// Your repositories and dependencies...

task sendMailCustom {
  doLast {
    // Configuration du serveur SMTP
    String smtpHost = "smtp.gmail.com"
    int smtpPort = 587
    String username = "scientifique.search@gmail.com"
    String password = "ipdm pvxp etkm lewv"

    // Paramètres de l'email
    String fromEmail = "scientifique.search@gmail.com"
    String toEmail = "is_benguiar@esi.dz"
    String emailBody = "Hello!! this is the last update"
    String emailSubject = "Notification Mail"

    Properties props = new Properties()
    props.put("mail.smtp.auth", "true")
    props.put("mail.smtp.starttls.enable", "true")
    props.put("mail.smtp.host", smtpHost)
    props.put("mail.smtp.port", smtpPort)

    // Authentification et session
    Session session = Session.getInstance(props, new Authenticator() {
      @Override
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication(username, password)
      }
    })

    try {
      // Création du message
      Message message = new MimeMessage(session)
      message.setFrom(new InternetAddress(fromEmail))
      message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail))
      message.setSubject(emailSubject)
      message.setText(emailBody)

      // Envoi du message
      Transport.send(message)
      println("Email envoyé avec succès à : $toEmail")
    } catch (MessagingException e) {
      e.printStackTrace()
      println("Échec de l'envoi de l'email.")
    }
  }
}

// Ensure sendMailCustom runs after the publish task
publish.finalizedBy(sendMailCustom)


//publish.finalizedBy(sendMail)




